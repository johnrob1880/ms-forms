/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  TranslationServiceInterface,
  TranslationSet,
} from './common/interfaces';


export namespace Components {

  interface MsDumpResult {
    'lang': string;
  }
  interface MsDumpResultAttributes extends StencilHTMLAttributes {
    'lang'?: string;
  }

  interface MsFormExample {}
  interface MsFormExampleAttributes extends StencilHTMLAttributes {}

  interface MsFormResult {
    'actions': any;
    'show': boolean;
    'template': (values, actions) => void;
    'values': any;
  }
  interface MsFormResultAttributes extends StencilHTMLAttributes {
    'actions'?: any;
    'show'?: boolean;
    'template'?: (values, actions) => void;
    'values'?: any;
  }

  interface MsFormStep {
    'heading': string;
    'renderFunc': (values) => void;
    'show': boolean;
    'step': number;
    'translate': string;
    'translator': (str:string, fallback?:string) => string;
    'validate': () => Promise<{}>;
    'validates': () => Promise<boolean>;
    'values': {};
  }
  interface MsFormStepAttributes extends StencilHTMLAttributes {
    'heading'?: string;
    'renderFunc'?: (values) => void;
    'show'?: boolean;
    'step'?: number;
    'translate'?: string;
    'translator'?: (str:string, fallback?:string) => string;
    'values'?: {};
  }

  interface MsForm {
    'backText': string;
    'finishText': string;
    'heading': string;
    'id': string;
    'nextText': string;
    'steps': number;
    'visibleOnResults': boolean;
  }
  interface MsFormAttributes extends StencilHTMLAttributes {
    'backText'?: string;
    'finishText'?: string;
    'heading'?: string;
    'id'?: string;
    'nextText'?: string;
    'steps'?: number;
    'visibleOnResults'?: boolean;
  }

  interface MsLanguage {
    'autoDetect': boolean;
    'definition': TranslationSet;
    'definitionJson': string;
    'getCurrentDefinition': () => Promise<{}>;
    'getLanguageKey': () => Promise<{}>;
    'languageResourcesUrl': string;
    'loadLanguage': (url: string) => void;
    'scope': string;
  }
  interface MsLanguageAttributes extends StencilHTMLAttributes {
    'autoDetect'?: boolean;
    'definition'?: TranslationSet;
    'definitionJson'?: string;
    'languageResourcesUrl'?: string;
    'scope'?: string;
  }

  interface MsTranslate {
    'create': () => Promise<TranslationServiceInterface>;
  }
  interface MsTranslateAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'MsDumpResult': Components.MsDumpResult;
    'MsFormExample': Components.MsFormExample;
    'MsFormResult': Components.MsFormResult;
    'MsFormStep': Components.MsFormStep;
    'MsForm': Components.MsForm;
    'MsLanguage': Components.MsLanguage;
    'MsTranslate': Components.MsTranslate;
  }

  interface StencilIntrinsicElements {
    'ms-dump-result': Components.MsDumpResultAttributes;
    'ms-form-example': Components.MsFormExampleAttributes;
    'ms-form-result': Components.MsFormResultAttributes;
    'ms-form-step': Components.MsFormStepAttributes;
    'ms-form': Components.MsFormAttributes;
    'ms-language': Components.MsLanguageAttributes;
    'ms-translate': Components.MsTranslateAttributes;
  }


  interface HTMLMsDumpResultElement extends Components.MsDumpResult, HTMLStencilElement {}
  var HTMLMsDumpResultElement: {
    prototype: HTMLMsDumpResultElement;
    new (): HTMLMsDumpResultElement;
  };

  interface HTMLMsFormExampleElement extends Components.MsFormExample, HTMLStencilElement {}
  var HTMLMsFormExampleElement: {
    prototype: HTMLMsFormExampleElement;
    new (): HTMLMsFormExampleElement;
  };

  interface HTMLMsFormResultElement extends Components.MsFormResult, HTMLStencilElement {}
  var HTMLMsFormResultElement: {
    prototype: HTMLMsFormResultElement;
    new (): HTMLMsFormResultElement;
  };

  interface HTMLMsFormStepElement extends Components.MsFormStep, HTMLStencilElement {}
  var HTMLMsFormStepElement: {
    prototype: HTMLMsFormStepElement;
    new (): HTMLMsFormStepElement;
  };

  interface HTMLMsFormElement extends Components.MsForm, HTMLStencilElement {}
  var HTMLMsFormElement: {
    prototype: HTMLMsFormElement;
    new (): HTMLMsFormElement;
  };

  interface HTMLMsLanguageElement extends Components.MsLanguage, HTMLStencilElement {}
  var HTMLMsLanguageElement: {
    prototype: HTMLMsLanguageElement;
    new (): HTMLMsLanguageElement;
  };

  interface HTMLMsTranslateElement extends Components.MsTranslate, HTMLStencilElement {}
  var HTMLMsTranslateElement: {
    prototype: HTMLMsTranslateElement;
    new (): HTMLMsTranslateElement;
  };

  interface HTMLElementTagNameMap {
    'ms-dump-result': HTMLMsDumpResultElement
    'ms-form-example': HTMLMsFormExampleElement
    'ms-form-result': HTMLMsFormResultElement
    'ms-form-step': HTMLMsFormStepElement
    'ms-form': HTMLMsFormElement
    'ms-language': HTMLMsLanguageElement
    'ms-translate': HTMLMsTranslateElement
  }

  interface ElementTagNameMap {
    'ms-dump-result': HTMLMsDumpResultElement;
    'ms-form-example': HTMLMsFormExampleElement;
    'ms-form-result': HTMLMsFormResultElement;
    'ms-form-step': HTMLMsFormStepElement;
    'ms-form': HTMLMsFormElement;
    'ms-language': HTMLMsLanguageElement;
    'ms-translate': HTMLMsTranslateElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
